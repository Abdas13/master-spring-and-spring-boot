{"ast":null,"code":"var _jsxFileName = \"/Users/ranga/Ranga/git/00.courses/master-spring-and-spring-boot/41-full-stack/01-frontend/todo-app/src/components/todo/security/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { executeBasicAuthenticationService } from \"../api/HelloWorldApiService\";\n\n//1: Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n//2: Share the created context with other components\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  //3: Put some state in the context\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n  const [token, setToken] = useState(null);\n\n  // function login(username, password) {\n  //     if(username==='in28minutes' && password==='dummy'){\n  //         setAuthenticated(true)\n  //         setUsername(username)\n  //         return true            \n  //     } else {\n  //         setAuthenticated(false)\n  //         setUsername(null)\n  //         return false\n  //     }        \n  // }\n\n  async function login(username, password) {\n    const baToken = 'Basic ' + window.btoa(username + \":\" + password);\n    try {\n      const response = await executeBasicAuthenticationService(baToken);\n      if (response.status == 200) {\n        setAuthenticated(true);\n        setUsername(username);\n        setToken(baToken);\n        return true;\n      } else {\n        setAuthenticated(false);\n        setUsername(null);\n        return false;\n      }\n    } catch (error) {\n      setAuthenticated(false);\n      setUsername(null);\n      return false;\n    }\n  }\n  function logout() {\n    setAuthenticated(false);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"TN8WqXx3uVoSLaFezWMtgn1oPEU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","executeBasicAuthenticationService","AuthContext","useAuth","AuthProvider","children","isAuthenticated","setAuthenticated","username","setUsername","token","setToken","login","password","baToken","window","btoa","response","status","error","logout"],"sources":["/Users/ranga/Ranga/git/00.courses/master-spring-and-spring-boot/41-full-stack/01-frontend/todo-app/src/components/todo/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { executeBasicAuthenticationService } from \"../api/HelloWorldApiService\";\n\n//1: Create a Context\nexport const AuthContext = createContext()\n\nexport const useAuth = () => useContext(AuthContext)\n\n//2: Share the created context with other components\nexport default function AuthProvider({ children }) {\n\n    //3: Put some state in the context\n    const [isAuthenticated, setAuthenticated] = useState(false)\n\n    const [username, setUsername] = useState(null)\n\n    const [token, setToken] = useState(null)\n\n    // function login(username, password) {\n    //     if(username==='in28minutes' && password==='dummy'){\n    //         setAuthenticated(true)\n    //         setUsername(username)\n    //         return true            \n    //     } else {\n    //         setAuthenticated(false)\n    //         setUsername(null)\n    //         return false\n    //     }        \n    // }\n\n    async function login(username, password) {\n\n        const baToken = 'Basic ' + window.btoa( username + \":\" + password )\n\n        try {\n\n            const response = await executeBasicAuthenticationService(baToken)\n\n            if(response.status==200){\n                setAuthenticated(true)\n                setUsername(username)\n                setToken(baToken)\n                return true            \n            } else {\n                setAuthenticated(false)\n                setUsername(null)\n                return false\n            }    \n        } catch(error) {\n            setAuthenticated(false)\n            setUsername(null)\n            return false\n        }\n    }\n\n\n    function logout() {\n        setAuthenticated(false)\n    }\n\n    return (\n        <AuthContext.Provider value={ {isAuthenticated, login, logout, username}  }>\n            {children}\n        </AuthContext.Provider>\n    )\n} "],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,iCAAiC,QAAQ,6BAA6B;;AAE/E;AAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAE;AAE1C,OAAO,MAAMK,OAAO,GAAG;EAAA;EAAA,OAAMJ,UAAU,CAACG,WAAW,CAAC;AAAA;;AAEpD;AAAA,GAFaC,OAAO;AAGpB,eAAe,SAASC,YAAY,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAE7C;EACA,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,eAAeY,KAAK,CAACJ,QAAQ,EAAEK,QAAQ,EAAE;IAErC,MAAMC,OAAO,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAAER,QAAQ,GAAG,GAAG,GAAGK,QAAQ,CAAE;IAEnE,IAAI;MAEA,MAAMI,QAAQ,GAAG,MAAMhB,iCAAiC,CAACa,OAAO,CAAC;MAEjE,IAAGG,QAAQ,CAACC,MAAM,IAAE,GAAG,EAAC;QACpBX,gBAAgB,CAAC,IAAI,CAAC;QACtBE,WAAW,CAACD,QAAQ,CAAC;QACrBG,QAAQ,CAACG,OAAO,CAAC;QACjB,OAAO,IAAI;MACf,CAAC,MAAM;QACHP,gBAAgB,CAAC,KAAK,CAAC;QACvBE,WAAW,CAAC,IAAI,CAAC;QACjB,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAMU,KAAK,EAAE;MACXZ,gBAAgB,CAAC,KAAK,CAAC;MACvBE,WAAW,CAAC,IAAI,CAAC;MACjB,OAAO,KAAK;IAChB;EACJ;EAGA,SAASW,MAAM,GAAG;IACdb,gBAAgB,CAAC,KAAK,CAAC;EAC3B;EAEA,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAG;MAACD,eAAe;MAAEM,KAAK;MAAEQ,MAAM;MAAEZ;IAAQ,CAAI;IAAA,UACtEH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACU;AAE/B;AAAC,IAxDuBD,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}